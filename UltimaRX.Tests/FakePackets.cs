using System;
using System.IO;
using UltimaRX.IO;
using UltimaRX.Packets;
using UltimaRX.Packets.PacketDefinitions;

namespace UltimaRX.Tests
{
    public static class FakePackets
    {
        public static byte[] InitialLoginSeed => new byte[] {0xA9, 0xFE, 0x50, 0x50};

        public static byte[] InitialLoginRequest => new byte[]
        {
            0x80, 0x61, 0x64, 0x6D, 0x69, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x44, 0x4D,
            0x49, 0x4E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x99
        };

        public static byte[] SelectServerRequest => new byte[]
        {
            0xA0, 0x00, 0x00
        };

        public static byte[] GameServerList => new byte[]
        {
            0xA8, 0x00, 0x2E, 0x99, 0x00, 0x01, 0x00, 0x01, 0x4D, 0x6F, 0x72, 0x69, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x7F, 0x00, 0x00, 0x01
        };

        public static byte[] EnableLockedClientFeaturesEncrypted => new byte[]
        {
            0xB6, 0xA0, 0xFE, 0xF9
        };

        public static byte[] EnableLockedClientFeatures => new byte[]
        {
            0xB9, 0x80, 0x1F
        };

        public static Packet Instantiate(byte[] source)
        {
            var processingStream = new MemoryStream(source);
            var received = new byte[1024];

            var packetReader = new StreamPacketReader(processingStream, received);
            int packetId = packetReader.ReadByte();
            if ((packetId < 0) || (packetId > 255))
                throw new EndOfStreamException();

            var packetDefinition = PacketDefinitionRegistry.Find(packetId);
            var packetSize = packetDefinition.GetSize(packetReader);
            packetReader.ReadBytes(packetSize - packetReader.Position);
            var payload = new byte[packetSize];
            Array.Copy(received, 0, payload, 0, packetSize);

            var packet = new Packet(packetId, payload);

            return packet;
        }
    }
}